
services:
  # Tesseract OCR service (Flask-based server)
  tesseract:
    image: tesseractshadow/tesseract4re:4.0.0-rc1
    container_name: tesseract-ocr
    platform: linux/amd64
    ports:
    - "5006:5006"
    volumes:
      - ./tessdata:/usr/share/tesseract-ocr/4.00/tessdata
      - .docker-volumes/tesseract/uploaded_files:/input
      - ./tesseract/resultats_reconnaissance:/output
    environment:
      TESSDATA_PREFIX: /usr/share/tesseract-ocr/4.00/tessdata
      TESSERACT_LANGUAGE: ${TESSERACT_LANGUAGE:-fra+ar}
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      sh -c "flask run --host=0.0.0.0 --port=5006"

  # Flask app (sign-service)
  web:
    build:
      context: ./sign
      dockerfile: Dockerfile
    container_name: sign-service
    ports:
      - "5005:5005"
    environment:
      - FLASK_APP=app
      - FLASK_ENV=production
    depends_on:
      - kafka
      - tesseract
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5005/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL Database

  # Zookeeper service for Kafka
  zookeeper:
    image: arm64v8/zookeeper  # Explicitly use arm64v8 image for compatibility
    container_name: zookeeper-ocr
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka-ocr
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ZOOKEEPER_PORT: 2181
    depends_on:
      - zookeeper
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD-SHELL", "echo 'describe cluster' | kafka-console-producer --bootstrap-server kafka:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10  # Increased retries to ensure Kafka is fully up


  # NGINX reverse proxy
  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "87:80"
      - "743:443"
    volumes:
      - ./Backend/ocr-module/nginx/nginx.conf
    depends_on:
      - web
    networks:
      - ocr-network
    platform: linux/arm64/v8  # ARM64 platform for NGINX as well
    healthcheck:
      test: ["CMD-SHELL", "nginx -t || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

# Persistent volumes for data storage
volumes:
  mysql_data:
  tessdata:

# Secrets for secure database credentials
secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt

# Networks to ensure services communicate in isolation
networks:
  ocr-network:
    driver: bridge
