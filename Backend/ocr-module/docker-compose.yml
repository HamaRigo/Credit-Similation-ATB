version: '3.8'

services:
  # Tesseract OCR service
  tesseract:
    image: tesseractshadow/tesseract4re:latest
    container_name: tesseract
    platform: linux/amd64
    ports:
      - "9090:9090"
    volumes:
      - ./temp/uploaded_files:/input
      - ./temp/resultats_reconnaissance:/output
    environment:
      TESSDATA_PREFIX: /usr/share/tesseract-ocr/4.00/tessdata
      TESSERACT_LANGUAGE: eng+fra+ar  # Specify languages for OCR
    networks:
      - ocr-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL Database with persistent volume for data storage
  db:
    image: mysql:8
    container_name: db-instance
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: shared_database
      MYSQL_USER: root
      MYSQL_PASSWORD: ''
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql  # Persistent data storage
    secrets:
      - mysql_root_password
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ocr-network

  # Kafka service for event-driven OCR task distribution
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - ocr-network

  # TensorFlow Model Initialization Service
  model-init:
    image: alpine
    container_name: model-init
    command: sh -c "mkdir -p /models/model/1/variables && \
      mkdir -p /models/model/1/assets && \
      touch /models/model/1/saved_model.pb && \
      touch /models/model/1/variables/variables.data-00000-of-00001 && \
      touch /models/model/1/variables/variables.index"
    volumes:
      - "/Users/hammarigo/Desktop/ocr branche/Backend/ocr-module/tensorflow/models:/models/model"
    networks:
      - ocr-network
    depends_on:
      - db

  # TensorFlow Model Server for serving the trained machine learning model
  tensorflow:
    image: emacski/tensorflow-serving:latest  # ARM-compatible image
    container_name: tensorflow
    ports:
      - "8501:8501"
    volumes:
      - /Users/hammarigo/Desktop/ocr branche/Backend/ocr-module/tensorflow/models:/models/model
    environment:
      - MODEL_NAME=model
    depends_on:
      - model-init
    command: >
      tensorflow_model_server
      --rest_api_port=8501
      --model_name=model
      --model_base_path=/models/model
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/v1/models/model"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OCR Module service
  ocr-module:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ocr-module
    ports:
      - "8502:8502"
    networks:
      - ocr-network
    depends_on:
      - db
      - tensorflow

# Secrets for secure database credentials
secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt

# Networks to ensure services communicate in isolation
networks:
  ocr-network:
    driver: bridge
