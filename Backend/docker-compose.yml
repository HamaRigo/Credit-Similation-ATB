services:
  # Shared Database
  db:
    image: mysql:8
    container_name: shared_database
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: shared_database
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306" # Expose MySQL
    volumes:
      - ./docker-volumes/db_data:/var/lib/mysql # Centralized persistent storage
    networks:
      - shared-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 15s
      timeout: 10s
      retries: 3

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    command: ["start-dev", "--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: db
      DB_DATABASE: shared_database
      DB_USER: root
      DB_PASSWORD: root
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8282:8080" # Expose Keycloak
    volumes:
      - ./docker-volumes/keycloak-realms:/opt/keycloak/data/import
    depends_on:
      - db
    networks:
      - shared-network

  # Tesseract OCR
  tesseract:
    image: tesseractshadow/tesseract4re:latest
    container_name: tesseract
    platform: linux/amd64
    ports:
      - "9090:9090"
    volumes:
      - ./docker-volumes/tesseract/uploaded_files:/input
      - ./docker-volumes/tesseract/resultats_reconnaissance:/output
    networks:
      - shared-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOO_4LW_COMMANDS_WHITELIST=*
    ports:
      - "2181:2181"
    networks:
      - shared-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - shared-network

  # Fluentd for Centralized Logging
  fluentd:
    build:
      dockerfile: Dockerfile
    container_name: fluentd
    platform: linux/amd64
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./docker-volumes/fluentd/conf:/fluentd/etc
      - ./docker-volumes/fluentd/logs:/fluentd/logs
    depends_on:
      - elasticsearch
    networks:
      - shared-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090" # Prometheus Dashboard
    volumes:
      - ./docker-volumes/prometheus:/etc/prometheus
    networks:
      - shared-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000" # Grafana Dashboard
    volumes:
      - ./docker-volumes/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - shared-network


  # Elasticsearch for Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elasticsearch
    environment:
      discovery.type: single-node
    ports:
      - "9200:9200"
    volumes:
      - ./docker-volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - shared-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  db_data:
  grafana_data:

networks:
  shared-network:
    driver: bridge